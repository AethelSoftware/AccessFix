/*
  # AccessFix Database Schema

  ## Overview
  Creates the core database structure for AccessFix, a SaaS accessibility scanning tool
  that analyzes HTML/CSS for accessibility issues and generates automated GitHub PRs.

  ## New Tables

  ### 1. `scans`
  Main table tracking all accessibility scans performed by users.
  - `id` (uuid, primary key) - Unique scan identifier
  - `user_id` (uuid, foreign key) - Links to auth.users
  - `name` (text) - User-provided name for the scan
  - `scan_type` (text) - Either 'url' or 'file'
  - `target_url` (text, nullable) - URL scanned (if scan_type is 'url')
  - `file_name` (text, nullable) - Original filename (if scan_type is 'file')
  - `status` (text) - Scan status: 'pending', 'processing', 'completed', 'failed'
  - `total_issues` (integer) - Total number of issues found
  - `critical_count` (integer) - Count of critical severity issues
  - `warning_count` (integer) - Count of warning severity issues
  - `info_count` (integer) - Count of info severity issues
  - `github_repo` (text, nullable) - Target GitHub repo for PR generation
  - `created_at` (timestamptz) - When scan was created
  - `completed_at` (timestamptz, nullable) - When scan completed

  ### 2. `issues`
  Stores individual accessibility issues found in each scan.
  - `id` (uuid, primary key) - Unique issue identifier
  - `scan_id` (uuid, foreign key) - Links to scans table
  - `severity` (text) - Issue severity: 'critical', 'warning', 'info'
  - `category` (text) - Issue category (e.g., 'images', 'forms', 'structure', 'color')
  - `title` (text) - Short description of the issue
  - `description` (text) - Detailed explanation
  - `selector` (text, nullable) - CSS selector identifying the problematic element
  - `line_number` (integer, nullable) - Line number in source code
  - `recommended_fix` (text) - Suggested fix for the issue
  - `code_snippet` (text, nullable) - Original code causing the issue
  - `fixed_code` (text, nullable) - Corrected code suggestion
  - `wcag_criteria` (text, nullable) - Relevant WCAG success criteria
  - `created_at` (timestamptz) - When issue was detected

  ### 3. `pull_requests`
  Tracks GitHub pull requests generated by AccessFix.
  - `id` (uuid, primary key) - Unique PR identifier
  - `scan_id` (uuid, foreign key) - Links to scans table
  - `user_id` (uuid, foreign key) - Links to auth.users
  - `github_repo` (text) - Full repository name (owner/repo)
  - `pr_number` (integer) - GitHub PR number
  - `pr_url` (text) - Full URL to the pull request
  - `status` (text) - PR status: 'open', 'merged', 'closed'
  - `branch_name` (text) - Git branch name created for the PR
  - `created_at` (timestamptz) - When PR was created

  ## Security
  - Enable RLS on all tables
  - Users can only access their own scans, issues, and PRs
  - Authenticated users required for all operations
*/

-- Create scans table
CREATE TABLE IF NOT EXISTS scans (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id uuid REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,
  name text NOT NULL,
  scan_type text NOT NULL CHECK (scan_type IN ('url', 'file')),
  target_url text,
  file_name text,
  status text NOT NULL DEFAULT 'pending' CHECK (status IN ('pending', 'processing', 'completed', 'failed')),
  total_issues integer DEFAULT 0,
  critical_count integer DEFAULT 0,
  warning_count integer DEFAULT 0,
  info_count integer DEFAULT 0,
  github_repo text,
  created_at timestamptz DEFAULT now(),
  completed_at timestamptz
);

-- Create issues table
CREATE TABLE IF NOT EXISTS issues (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  scan_id uuid REFERENCES scans(id) ON DELETE CASCADE NOT NULL,
  severity text NOT NULL CHECK (severity IN ('critical', 'warning', 'info')),
  category text NOT NULL,
  title text NOT NULL,
  description text NOT NULL,
  selector text,
  line_number integer,
  recommended_fix text NOT NULL,
  code_snippet text,
  fixed_code text,
  wcag_criteria text,
  created_at timestamptz DEFAULT now()
);

-- Create pull_requests table
CREATE TABLE IF NOT EXISTS pull_requests (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  scan_id uuid REFERENCES scans(id) ON DELETE CASCADE NOT NULL,
  user_id uuid REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,
  github_repo text NOT NULL,
  pr_number integer NOT NULL,
  pr_url text NOT NULL,
  status text NOT NULL DEFAULT 'open' CHECK (status IN ('open', 'merged', 'closed')),
  branch_name text NOT NULL,
  created_at timestamptz DEFAULT now()
);

-- Enable RLS
ALTER TABLE scans ENABLE ROW LEVEL SECURITY;
ALTER TABLE issues ENABLE ROW LEVEL SECURITY;
ALTER TABLE pull_requests ENABLE ROW LEVEL SECURITY;

-- RLS Policies for scans table
CREATE POLICY "Users can view own scans"
  ON scans FOR SELECT
  TO authenticated
  USING (auth.uid() = user_id);

CREATE POLICY "Users can create own scans"
  ON scans FOR INSERT
  TO authenticated
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update own scans"
  ON scans FOR UPDATE
  TO authenticated
  USING (auth.uid() = user_id)
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can delete own scans"
  ON scans FOR DELETE
  TO authenticated
  USING (auth.uid() = user_id);

-- RLS Policies for issues table
CREATE POLICY "Users can view issues from own scans"
  ON issues FOR SELECT
  TO authenticated
  USING (
    EXISTS (
      SELECT 1 FROM scans
      WHERE scans.id = issues.scan_id
      AND scans.user_id = auth.uid()
    )
  );

CREATE POLICY "Users can create issues for own scans"
  ON issues FOR INSERT
  TO authenticated
  WITH CHECK (
    EXISTS (
      SELECT 1 FROM scans
      WHERE scans.id = issues.scan_id
      AND scans.user_id = auth.uid()
    )
  );

CREATE POLICY "Users can update issues from own scans"
  ON issues FOR UPDATE
  TO authenticated
  USING (
    EXISTS (
      SELECT 1 FROM scans
      WHERE scans.id = issues.scan_id
      AND scans.user_id = auth.uid()
    )
  )
  WITH CHECK (
    EXISTS (
      SELECT 1 FROM scans
      WHERE scans.id = issues.scan_id
      AND scans.user_id = auth.uid()
    )
  );

CREATE POLICY "Users can delete issues from own scans"
  ON issues FOR DELETE
  TO authenticated
  USING (
    EXISTS (
      SELECT 1 FROM scans
      WHERE scans.id = issues.scan_id
      AND scans.user_id = auth.uid()
    )
  );

-- RLS Policies for pull_requests table
CREATE POLICY "Users can view own pull requests"
  ON pull_requests FOR SELECT
  TO authenticated
  USING (auth.uid() = user_id);

CREATE POLICY "Users can create own pull requests"
  ON pull_requests FOR INSERT
  TO authenticated
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update own pull requests"
  ON pull_requests FOR UPDATE
  TO authenticated
  USING (auth.uid() = user_id)
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can delete own pull requests"
  ON pull_requests FOR DELETE
  TO authenticated
  USING (auth.uid() = user_id);

-- Create indexes for better query performance
CREATE INDEX IF NOT EXISTS idx_scans_user_id ON scans(user_id);
CREATE INDEX IF NOT EXISTS idx_scans_status ON scans(status);
CREATE INDEX IF NOT EXISTS idx_scans_created_at ON scans(created_at DESC);
CREATE INDEX IF NOT EXISTS idx_issues_scan_id ON issues(scan_id);
CREATE INDEX IF NOT EXISTS idx_issues_severity ON issues(severity);
CREATE INDEX IF NOT EXISTS idx_pull_requests_scan_id ON pull_requests(scan_id);
CREATE INDEX IF NOT EXISTS idx_pull_requests_user_id ON pull_requests(user_id);